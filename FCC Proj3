import decimal
class Category:
    def __init__(self,name):
        self.name = name  # name of budget category
        self.ledger = []

    # get_balance method
    def get_balance(self):
        self.total_money = 0
        global list_money_items
        list_money_items = []
        for x in (self.ledger):
            list_money_items.append(int(x.get("amount")))

        # noinspection PyUnreachableCode
        for x in list_money_items:
            self.total_money += x
        return self.total_money

    def print_ledger(self):
        return self.ledger

    # check funds method
    def check_funds(self, sample_amount):
        self.sample_amount = sample_amount

        if self.sample_amount > self.get_balance():
            return False
        else:
            return True

        # deposit method
    def deposit(self,amount,description=None):
        self.amount = amount
        self.description = description

        (self.ledger).append({"amount": amount, "description": description})


    # withdraw method
    def withdraw(self,w_amount,w_description=None):
        self.w_amount = w_amount
        self.w_description = w_description

        if self.check_funds(self.w_amount) == False:
            return False
        elif self.check_funds(self.w_amount) == True:
            (self.ledger).append({"amount": -w_amount, "description": w_description})
            return True

    def transfer(self,t_amount,other_budget):
        self.t_amount = t_amount
        self.other_budget = other_budget

        if self.check_funds(self.t_amount) == False:
            return False
        elif self.check_funds(self.t_amount) == True:
            (self.ledger).append({"amount": -t_amount, "description": f'Transfer to {other_budget.name}'})
            (other_budget.ledger).append({"amount": t_amount, "description": f'Transfer from {self.name}'})
            return True

    def __str__(self):
        def print_title(title):
            length = len(title)
            space = 30 - length
            no_space = space/2

            if space % 2 == 0:
                no_space = int(no_space)
                return f"{('*' * no_space)}{title}{('*' * no_space)}"
            elif space % 2 != 0:
                no_space = int(no_space-0.5)
                return f"{('*' * (no_space+1))}{title}{('*' * no_space)}"

        def print_items(list):
            for x in list:
                money = x.get("amount")
                describe = x.get("description")
                remove = 30 - len(describe)
                # Converting the given number to decimal
                decimalValue = decimal.Decimal(money)
                # rounding the number upto 2 digits after the decimal point
                float_money = str(decimalValue.quantize(decimal.Decimal('0.00')))
                return f'{describe[:24]}{float_money.rjust(remove)}\n'

        # Converting the total balance number to decimal
        deciValue = decimal.Decimal(self.get_balance())
        # rounding the number up to 2 digits after the decimal point
        float_balance = deciValue.quantize(decimal.Decimal('0.00'))

        # return ledger category items
        return f'{print_title(self.name)}\n{print_items(self.ledger)}Total: {float_balance}'


# def create_spend_chart(categories):

food = Category("Food")
food.deposit(1000, "initial deposit")
food.deposit(1000, "second deposit")
food.withdraw(10.15, "groceries")
food.withdraw(15.89, "restaurant and more food for dessert")
print(food.get_balance())
print(food)

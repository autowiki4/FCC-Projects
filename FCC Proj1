def arithmetic_arranger(problems):
    global modified_i
    global arrange_problems
    global arranged_problems
    arranged_problems = ''
    arrange_problems = []

    # test for maximum number of items in list
    if len(problems) > 5:
        return "Error: Too many problems."
    else:
        pass

    # Index the addition or subtraction operator
    global index
    try:
        for i in problems:
            try:
                index = i.index('+')
            except:
                index = i.index('-')
    except:
        # prevent use of '*' or '/' operator
        for i in problems:
            try:
                i.find('*')
                return "Error: Operator must be '+' or '-'."
            except:
                i.find('/')
                return "Error: Operator must be '+' or '-'."

    # ensure numbers entered consist of digits

    for i in problems:
        int_1 = i[:index-1]
        int_2 = i[index+2:]
        if int_1.isdigit() == True and int_2.isdigit() == True:
            pass
        elif int_1.isdigit() == False or int_2.isdigit() == False:
            return "Error: Numbers must only contain digits."

    # ensure that numbers entered contain at most four(4) digits
    for i in problems:
        int_1 = i[:index-1]
        int_2 = i[index+2:]
        if len(int_1) > 4:
            return "Error: Numbers cannot be more than four digits."
        elif len(int_2) > 4:
            return "Error: Numbers cannot be more than four digits."
        else:
            pass

        # Code to represent the arithmetic operation in new lines
        if max(len(i[:index-1]),len(i[index+2:])) == 1:
            modified_i = f'{int_1.rjust(3)}\n{i[index]} {i[index + 2:].rjust(1)}\n---'
            arrange_problems.append(modified_i)
        elif max(len(i[:index-1]),len(i[index+2:])) == 2:
            modified_i = f'{int_1.rjust(4)}\n{i[index]} {i[index + 2:].rjust(2)}\n----'
            arrange_problems.append(modified_i)
        elif max(len(i[:index-1]),len(i[index+2:])) == 3:
            modified_i = f'{int_1.rjust(5)}\n{i[index]} {i[index + 2:].rjust(3)}\n-----'
            arrange_problems.append(modified_i)
        elif max(len(i[:index-1]),len(i[index+2:])) == 4:
            modified_i = f'{int_1.rjust(6)}\n{i[index]} {i[index + 2:].rjust(4)}\n------'
            arrange_problems.append(modified_i)


    # print the arithmetic in new lines
    first_lines = '    '.join(string.split('\n')[0] for string in arrange_problems)
    second_lines = '    '.join(string.split('\n')[1] for string in arrange_problems)
    third_lines = '    '.join(string.split('\n')[2] for string in arrange_problems)

    arranged_problems = f'{first_lines}\n{second_lines}\n{third_lines}'
    return arranged_problems
print(arithmetic_arranger(["4 + 1","3 + 2","2 - 3"]))

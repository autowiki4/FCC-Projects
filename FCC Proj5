import copy
import random
class Hat:
    def __init__(self,**kwargs):
        self.argument = kwargs
        self.contents = []

        for x in self.argument:
            # Append the item multiple times to the list
            for _ in range(self.argument[x]):
                (self.contents).append(x)

    def conts(self):
        return list(self.contents)

    def draw(self,balls):
        self.balls = balls
        self.removed = []

        # Create a copy of the original list
        shuffled_list = (self.contents).copy()

        # Shuffle the copy
        random.shuffle(shuffled_list)
        # Remove the required number of items from the shuffled list
        for _ in range(self.balls):
            (self.removed).append(shuffled_list.pop())
        self.contents = shuffled_list
        return self.removed

def experiment(hat,expected_balls, num_balls_drawn,num_experiments):
    selected_count = 0

    ball_count = []
    for x,y in expected_balls.items():
        ball_count.extend([x] * y)
    for _ in range(num_experiments):
        hat_copy = copy.deepcopy(hat.conts())  # Create a deep copy to avoid modifying the original hat
        # Use random.choices to select items with replacement
        selected_items = random.choices(hat_copy, k=num_balls_drawn)
        if set(ball_count).issubset(selected_items):
            selected_count += 1

    return selected_count / num_experiments



hat = Hat(blue=4, red=2, green=6)
probability = experiment(
    hat=hat,
    expected_balls={"blue": 2,
                    "red": 1},
    num_balls_drawn=4,
    num_experiments=3000)
print("Probability:", probability)
